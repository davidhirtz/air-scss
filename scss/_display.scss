@use "sass:math";

$display: (
        hidden:(base, xs, sm, md, lg, xl),
        block:(base, xs, sm, md, lg, xl),
        flex:(base, sm, md),
) !default;

$flex-row: false !default;
$flex-row-reverse: base !default;
$flex-wrap: base, md, lg !default;
$flex-nowrap: false !default;
$flex-column: false !default;
$flex-column-reverse: false !default;
$flex-1: base !default;
$align-start: base !default;
$align-center: base !default;
$justify-start: false !default;
$justify-end: false !default;
$justify-center: base !default;
$justify-between: base !default;

$column-count: 12 !default;
$columns: (
        12:(base),
        6:(base, sm, lg),
        4:(sm),
        3:(md),
) !default;

@each $value, $display-breakpoints in $display {
  @each $breakpoint in $display-breakpoints {
    @include media-breakpoint-up($breakpoint) {
      .#{$value}#{breakpoint-infix($breakpoint)} {
        @if $value == 'hidden' {
          display: none;
        } @else {
          display: $value;
        }
      }
    }
  }
}

@if $flex-wrap {
  @each $breakpoint in $flex-wrap {
    @include media-breakpoint-up($breakpoint) {
      .flex-wrap#{breakpoint-infix($breakpoint)} {
        flex-wrap: wrap;
      }
    }
  }
}

@if $flex-nowrap {
  @each $breakpoint in $flex-nowrap {
    @include media-breakpoint-up($breakpoint) {
      .flex-nowrap#{breakpoint-infix($breakpoint)} {
        flex-wrap: nowrap;
      }
    }
  }
}

@if $flex-row {
  @each $breakpoint in $flex-row {
    @include media-breakpoint-up($breakpoint) {
      .row#{breakpoint-infix($breakpoint)} {
        flex-flow: row;
      }
    }
  }
}

@if $flex-row-reverse {
  @each $breakpoint in $flex-row-reverse {
    @include media-breakpoint-up($breakpoint) {
      .row-reverse#{breakpoint-infix($breakpoint)} {
        flex-flow: row-reverse;
      }
    }
  }
}

@if $flex-column {
  @each $breakpoint in $flex-column {
    @include media-breakpoint-up($breakpoint) {
      .flex-column#{breakpoint-infix($breakpoint)} {
        flex-flow: column;
        height: 100%;
      }
    }
  }
}

@if $flex-column-reverse {
  @each $breakpoint in $flex-column-reverse {
    @include media-breakpoint-up($breakpoint) {
      .column-reverse#{breakpoint-infix($breakpoint)} {
        flex-flow: column-reverse;
        height: 100%;
      }
    }
  }
}

@if $flex-1 {
  @each $breakpoint in $flex-1 {
    @include media-breakpoint-up($breakpoint) {
      .flex-1#{breakpoint-infix($breakpoint)} {
        flex: 1;
        min-width: 1px; // see https://css-tricks.com/flexbox-truncated-text/
      }
    }
  }
}

@if $align-center {
  @each $breakpoint in $align-center {
    @include media-breakpoint-up($breakpoint) {
      .align-center#{breakpoint-infix($breakpoint)} {
        align-items: center;
      }
    }
  }
}

@if $align-start {
  @each $breakpoint in $align-start {
    @include media-breakpoint-up($breakpoint) {
      .align-start#{breakpoint-infix($breakpoint)} {
        align-items: flex-start;
      }
    }
  }
}

@if $justify-start {
  @each $breakpoint in $justify-start {
    @include media-breakpoint-up($breakpoint) {
      .justify-start#{breakpoint-infix($breakpoint)} {
        justify-content: flex-start;
      }
    }
  }
}


@if $justify-end {
  @each $breakpoint in $justify-end {
    @include media-breakpoint-up($breakpoint) {
      .justify-end#{breakpoint-infix($breakpoint)} {
        justify-content: flex-end;
      }
    }
  }
}


@if $justify-center {
  @each $breakpoint in $justify-center {
    @include media-breakpoint-up($breakpoint) {
      .justify-center#{breakpoint-infix($breakpoint)} {
        justify-content: center;
      }
    }
  }
}

@if $justify-between {
  @each $breakpoint in $justify-between {
    @include media-breakpoint-up($breakpoint) {
      .justify-between#{breakpoint-infix($breakpoint)} {
        justify-content: space-between;
      }
    }
  }
}

@each $size, $column-breakpoints in $columns {
  @each $breakpoint in $column-breakpoints {
    @include media-breakpoint-up($breakpoint) {
      .w-#{$size}#{breakpoint-infix($breakpoint)} {
        width: math.div($size, $column-count) * 100%;
      }
    }
  }
}